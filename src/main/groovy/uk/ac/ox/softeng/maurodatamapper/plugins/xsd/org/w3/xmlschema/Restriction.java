/**
 * Copyright 2020-2021 University of Oxford and Health and Social Care Information Centre, also known as NHS Digital
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.19 at 04:44:22 PM GMT 
//


package uk.ac.ox.softeng.maurodatamapper.plugins.xsd.org.w3.xmlschema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;


/**
 * base attribute and simpleType child are mutually exclusive, but one or other is required
 *
 *
 * <p>Java class for anonymous complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.w3.org/2001/XMLSchema}annotated">
 *       &lt;group ref="{http://www.w3.org/2001/XMLSchema}simpleRestrictionModel"/>
 *       &lt;attribute name="base" type="{http://www.w3.org/2001/XMLSchema}QName" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "simpleType",
    "minExclusivesAndMinInclusivesAndMaxExclusives"
})
@XmlRootElement(name = "restriction")
public class Restriction
    extends Annotated {

    @XmlAttribute(name = "base")
    protected QName base;
    @XmlElementRefs({
                        @XmlElementRef(name = "maxExclusive", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "minInclusive", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "minLength", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "enumeration", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "length", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "pattern", namespace = "http://www.w3.org/2001/XMLSchema", type = Pattern.class, required = false),
                        @XmlElementRef(name = "fractionDigits", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "whiteSpace", namespace = "http://www.w3.org/2001/XMLSchema", type = WhiteSpace.class,
                                       required = false),
                        @XmlElementRef(name = "totalDigits", namespace = "http://www.w3.org/2001/XMLSchema", type = TotalDigits.class,
                                       required = false),
                        @XmlElementRef(name = "maxLength", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "minExclusive", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false),
                        @XmlElementRef(name = "maxInclusive", namespace = "http://www.w3.org/2001/XMLSchema", type = JAXBElement.class,
                                       required = false)
                    })
    protected List<Object> minExclusivesAndMinInclusivesAndMaxExclusives;
    protected LocalSimpleType simpleType;

    /**
     * Gets the value of the base property.
     *
     * @return possible object is {@link QName }
     */
    public QName getBase() {
        return base;
    }

    /**
     * Sets the value of the base property.
     *
     * @param value allowed object is {@link QName }
     */
    public void setBase(QName value) {
        this.base = value;
    }

    /**
     * Gets the value of the minExclusivesAndMinInclusivesAndMaxExclusives property.
     *
     * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be
     * present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the minExclusivesAndMinInclusivesAndMaxExclusives
     * property.
     *
     * <p> For example, to add a new item, do as follows:
     * <pre>
     *    getMinExclusivesAndMinInclusivesAndMaxExclusives().add(newItem);
     * </pre>
     *
     *
     * <p> Objects of the following type(s) are allowed in the list {@link JAXBElement }{@code <}{@link Facet }{@code >} {@link JAXBElement }{@code
     * <}{@link Facet }{@code >} {@link JAXBElement }{@code <}{@link NumFacet }{@code >} {@link JAXBElement }{@code <}{@link NoFixedFacet }{@code >}
     * {@link JAXBElement }{@code <}{@link NumFacet }{@code >} {@link Pattern } {@link JAXBElement }{@code <}{@link NumFacet }{@code >} {@link
     * WhiteSpace } {@link TotalDigits } {@link JAXBElement }{@code <}{@link NumFacet }{@code >} {@link JAXBElement }{@code <}{@link Facet }{@code >}
     * {@link JAXBElement }{@code <}{@link Facet }{@code >}
     */
    public List<Object> getMinExclusivesAndMinInclusivesAndMaxExclusives() {
        if (minExclusivesAndMinInclusivesAndMaxExclusives == null) {
            minExclusivesAndMinInclusivesAndMaxExclusives = new ArrayList<Object>();
        }
        return this.minExclusivesAndMinInclusivesAndMaxExclusives;
    }

    /**
     * Gets the value of the simpleType property.
     *
     * @return possible object is {@link LocalSimpleType }
     */
    public LocalSimpleType getSimpleType() {
        return simpleType;
    }

    /**
     * Sets the value of the simpleType property.
     *
     * @param value allowed object is {@link LocalSimpleType }
     */
    public void setSimpleType(LocalSimpleType value) {
        this.simpleType = value;
    }

}
